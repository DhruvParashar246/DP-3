class Solution:
    def minFallingPathSum(self, matrix: list[list[int]]) -> int:
        n = len(matrix)
        
        # We start from the second row (index 1) as the first row is our base case.
        for row in range(1, n):
            for col in range(n):
                
                # Get the value of the current cell in the matrix
                current_val = matrix[row][col]
                
                # Case 1: The cell is in the first column
                if col == 0:
                    min_above = min(matrix[row-1][col], matrix[row-1][col+1])
                # Case 2: The cell is in the last column
                elif col == n - 1:
                    min_above = min(matrix[row-1][col-1], matrix[row-1][col])
                # Case 3: The cell is in a middle column
                else:
                    min_above = min(matrix[row-1][col-1], matrix[row-1][col], matrix[row-1][col+1])
                
                # Update the current cell with the minimum falling path sum to that point
                matrix[row][col] += min_above
        
        # The result is the minimum value in the last row of the modified matrix
        return min(matrix[n-1])